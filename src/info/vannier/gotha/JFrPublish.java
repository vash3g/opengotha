package info.vannier.gotha;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Luc Vannier
 */
public class JFrPublish extends javax.swing.JFrame {
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;
    private TournamentInterface tournament;
    int processedRoundNumber = 0;

    /**
     * Creates new form JFrPublish
     */
    public JFrPublish(TournamentInterface tournament) throws RemoteException {
        this.tournament = tournament;
        processedRoundNumber = tournament.presumablyCurrentRoundNumber();
        initComponents();
        customInitComponents();
        setupRefreshTimer();
    }
   
    private volatile boolean running = true;
    javax.swing.Timer timer = null;
    private void setupRefreshTimer() {
        ActionListener taskPerformer;
        taskPerformer = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (!running){
                    timer.stop();
                }
                try {
                    if (!tournament.isOpen()) cleanClose();
                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrGamesResults.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        timer = new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer);
        timer.start();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGameFormat = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        grpSortType = new javax.swing.ButtonGroup();
        grpRemote = new javax.swing.ButtonGroup();
        jLabel9 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        btnClose = new javax.swing.JButton();
        tpnPublish = new javax.swing.JTabbedPane();
        pnlContents = new javax.swing.JPanel();
        pnlPL = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rdbSortByName = new javax.swing.JRadioButton();
        rdbSortByRank = new javax.swing.JRadioButton();
        pnlGL = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ckbShowPlayerRank = new javax.swing.JCheckBox();
        ckbShowPlayerCountry = new javax.swing.JCheckBox();
        ckbShowPlayerClub = new javax.swing.JCheckBox();
        pnlNPP = new javax.swing.JPanel();
        ckbShowByePlayer = new javax.swing.JCheckBox();
        ckbShowNotPairedPlayers = new javax.swing.JCheckBox();
        ckbShowNotParticipatingPlayers = new javax.swing.JCheckBox();
        ckbShowNotFinallyRegisteredPlayers = new javax.swing.JCheckBox();
        pnlSt = new javax.swing.JPanel();
        ckbDisplayNPPlayers = new javax.swing.JCheckBox();
        ckbDisplayNumCol = new javax.swing.JCheckBox();
        ckbDisplayPlCol = new javax.swing.JCheckBox();
        ckbDisplayCoCol = new javax.swing.JCheckBox();
        ckbDisplayClCol = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        rdbGameFormatFull = new javax.swing.JRadioButton();
        rdbGameFormatShort = new javax.swing.JRadioButton();
        pnlML = new javax.swing.JPanel();
        ckbDisplayIndGames = new javax.swing.JCheckBox();
        pnlPar = new javax.swing.JPanel();
        pnlActions = new javax.swing.JPanel();
        ckbPrint = new javax.swing.JCheckBox();
        ckbExportToLocalFile = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        ckbHTMLAutoscroll = new javax.swing.JCheckBox();
        pnlPub = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        spnRoundNumber = new javax.swing.JSpinner();
        btnPublishPL = new javax.swing.JButton();
        btnPrintTP = new javax.swing.JButton();
        btnPublishGL = new javax.swing.JButton();
        btnPrintNPP = new javax.swing.JButton();
        btnPublishSt = new javax.swing.JButton();
        btnExportRLEGF = new javax.swing.JButton();
        btnExportRLFFG = new javax.swing.JButton();
        btnExportRLAGA = new javax.swing.JButton();
        btnExportPlayersCSV = new javax.swing.JButton();
        pnlTeams = new javax.swing.JPanel();
        btnPublishTL = new javax.swing.JButton();
        btnPublishML = new javax.swing.JButton();
        btnPublishTS = new javax.swing.JButton();
        btnPrintRS = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();

        jLabel4.setText("jLabel4");

        jLabel9.setText("jLabel9");

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose);
        btnClose.setBounds(410, 490, 380, 30);

        pnlContents.setLayout(null);

        pnlPL.setBorder(javax.swing.BorderFactory.createTitledBorder("Players list"));
        pnlPL.setLayout(null);

        jLabel1.setText("Sort players by");
        pnlPL.add(jLabel1);
        jLabel1.setBounds(20, 20, 100, 20);

        grpSortType.add(rdbSortByName);
        rdbSortByName.setText("Name");
        rdbSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allSortRDBActionPerformed(evt);
            }
        });
        pnlPL.add(rdbSortByName);
        rdbSortByName.setBounds(130, 10, 70, 23);

        grpSortType.add(rdbSortByRank);
        rdbSortByRank.setText("Rank");
        rdbSortByRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allSortRDBActionPerformed(evt);
            }
        });
        pnlPL.add(rdbSortByRank);
        rdbSortByRank.setBounds(130, 30, 70, 23);

        pnlContents.add(pnlPL);
        pnlPL.setBounds(10, 20, 300, 70);

        pnlGL.setBorder(javax.swing.BorderFactory.createTitledBorder("Games list"));
        pnlGL.setLayout(null);

        jLabel3.setText("For each player, show");
        pnlGL.add(jLabel3);
        jLabel3.setBounds(10, 20, 150, 14);

        ckbShowPlayerRank.setSelected(true);
        ckbShowPlayerRank.setText("Rank");
        ckbShowPlayerRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlGL.add(ckbShowPlayerRank);
        ckbShowPlayerRank.setBounds(40, 40, 180, 20);

        ckbShowPlayerCountry.setText("Country");
        ckbShowPlayerCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlGL.add(ckbShowPlayerCountry);
        ckbShowPlayerCountry.setBounds(40, 60, 180, 20);

        ckbShowPlayerClub.setSelected(true);
        ckbShowPlayerClub.setText("Club");
        ckbShowPlayerClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlGL.add(ckbShowPlayerClub);
        ckbShowPlayerClub.setBounds(40, 80, 180, 20);

        pnlContents.add(pnlGL);
        pnlGL.setBounds(380, 20, 300, 120);

        pnlNPP.setBorder(javax.swing.BorderFactory.createTitledBorder("Non-playing players list"));
        pnlNPP.setLayout(null);

        ckbShowByePlayer.setSelected(true);
        ckbShowByePlayer.setText("Show Bye players if any");
        ckbShowByePlayer.setEnabled(false);
        ckbShowByePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(ckbShowByePlayer);
        ckbShowByePlayer.setBounds(10, 20, 230, 20);

        ckbShowNotPairedPlayers.setSelected(true);
        ckbShowNotPairedPlayers.setText("Show unpaired players if any");
        ckbShowNotPairedPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(ckbShowNotPairedPlayers);
        ckbShowNotPairedPlayers.setBounds(10, 40, 230, 20);

        ckbShowNotParticipatingPlayers.setText("Show not participating players if any");
        ckbShowNotParticipatingPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(ckbShowNotParticipatingPlayers);
        ckbShowNotParticipatingPlayers.setBounds(10, 60, 230, 20);

        ckbShowNotFinallyRegisteredPlayers.setSelected(true);
        ckbShowNotFinallyRegisteredPlayers.setText("Show not Finally registered players if any");
        ckbShowNotFinallyRegisteredPlayers.setEnabled(false);
        ckbShowNotFinallyRegisteredPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(ckbShowNotFinallyRegisteredPlayers);
        ckbShowNotFinallyRegisteredPlayers.setBounds(10, 80, 230, 20);

        pnlContents.add(pnlNPP);
        pnlNPP.setBounds(10, 110, 300, 110);

        pnlSt.setBorder(javax.swing.BorderFactory.createTitledBorder("Standings"));
        pnlSt.setLayout(null);

        ckbDisplayNPPlayers.setText("display non-playing players");
        ckbDisplayNPPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayNPPlayers);
        ckbDisplayNPPlayers.setBounds(10, 60, 180, 23);

        ckbDisplayNumCol.setSelected(true);
        ckbDisplayNumCol.setText("display Num column");
        ckbDisplayNumCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayNumCol);
        ckbDisplayNumCol.setBounds(210, 30, 180, 23);

        ckbDisplayPlCol.setSelected(true);
        ckbDisplayPlCol.setText("display Pl column");
        ckbDisplayPlCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayPlCol);
        ckbDisplayPlCol.setBounds(210, 50, 180, 23);

        ckbDisplayCoCol.setText("display Country column");
        ckbDisplayCoCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayCoCol);
        ckbDisplayCoCol.setBounds(210, 70, 180, 20);

        ckbDisplayClCol.setText("display Club column");
        ckbDisplayClCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayClCol);
        ckbDisplayClCol.setBounds(210, 90, 180, 23);

        jLabel5.setText("Game format");
        pnlSt.add(jLabel5);
        jLabel5.setBounds(400, 50, 110, 20);

        grpGameFormat.add(rdbGameFormatFull);
        rdbGameFormatFull.setText("Full (123+/w4)");
        rdbGameFormatFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allGameFormatRDBActionPerformed(evt);
            }
        });
        pnlSt.add(rdbGameFormatFull);
        rdbGameFormatFull.setBounds(510, 40, 150, 23);

        grpGameFormat.add(rdbGameFormatShort);
        rdbGameFormatShort.setText("Short (123+)");
        rdbGameFormatShort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allGameFormatRDBActionPerformed(evt);
            }
        });
        pnlSt.add(rdbGameFormatShort);
        rdbGameFormatShort.setBounds(510, 70, 150, 20);

        pnlContents.add(pnlSt);
        pnlSt.setBounds(10, 230, 670, 150);

        pnlML.setBorder(javax.swing.BorderFactory.createTitledBorder("Matches list (Team tournaments)"));
        pnlML.setLayout(null);

        ckbDisplayIndGames.setSelected(true);
        ckbDisplayIndGames.setText("also display Individual games");
        ckbDisplayIndGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allContentsCKBActionPerformed(evt);
            }
        });
        pnlML.add(ckbDisplayIndGames);
        ckbDisplayIndGames.setBounds(40, 20, 240, 23);

        pnlContents.add(pnlML);
        pnlML.setBounds(380, 150, 300, 70);

        tpnPublish.addTab("Contents", pnlContents);

        pnlPar.setLayout(null);

        pnlActions.setBorder(javax.swing.BorderFactory.createTitledBorder("Publish buttons will launch the following actions"));
        pnlActions.setLayout(null);

        ckbPrint.setSelected(true);
        ckbPrint.setText("Print");
        ckbPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allParametersCKBActionPerformed(evt);
            }
        });
        pnlActions.add(ckbPrint);
        ckbPrint.setBounds(10, 30, 81, 23);

        ckbExportToLocalFile.setSelected(true);
        ckbExportToLocalFile.setText("Export to a local file");
        ckbExportToLocalFile.setEnabled(false);
        ckbExportToLocalFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allParametersCKBActionPerformed(evt);
            }
        });
        pnlActions.add(ckbExportToLocalFile);
        ckbExportToLocalFile.setBounds(10, 70, 240, 23);

        pnlPar.add(pnlActions);
        pnlActions.setBounds(20, 20, 400, 430);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("HTML export files"));
        jPanel1.setLayout(null);

        ckbHTMLAutoscroll.setText("Include an autoscroll feature into HTM Files");
        ckbHTMLAutoscroll.setToolTipText("interesting to display html files with a projector");
        ckbHTMLAutoscroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allParametersCKBActionPerformed(evt);
            }
        });
        jPanel1.add(ckbHTMLAutoscroll);
        ckbHTMLAutoscroll.setBounds(10, 40, 320, 23);

        pnlPar.add(jPanel1);
        jPanel1.setBounds(440, 20, 340, 90);

        tpnPublish.addTab("Parameters", pnlPar);

        pnlPub.setLayout(null);

        jLabel2.setText("Round");
        pnlPub.add(jLabel2);
        jLabel2.setBounds(310, 30, 60, 14);

        spnRoundNumber.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnRoundNumberStateChanged(evt);
            }
        });
        pnlPub.add(spnRoundNumber);
        spnRoundNumber.setBounds(390, 20, 40, 30);

        btnPublishPL.setText("Publish players list");
        btnPublishPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublishPLActionPerformed(evt);
            }
        });
        pnlPub.add(btnPublishPL);
        btnPublishPL.setBounds(10, 80, 230, 40);

        btnPrintTP.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintTP.setForeground(new java.awt.Color(0, 0, 255));
        btnPrintTP.setText("Print Tournament settings");
        btnPrintTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTPActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintTP);
        btnPrintTP.setBounds(10, 130, 230, 25);

        btnPublishGL.setText("Publish games of round 1 ");
        btnPublishGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublishGLActionPerformed(evt);
            }
        });
        pnlPub.add(btnPublishGL);
        btnPublishGL.setBounds(260, 80, 260, 40);

        btnPrintNPP.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintNPP.setForeground(new java.awt.Color(0, 0, 255));
        btnPrintNPP.setText("Print non-playing players of Round 1");
        btnPrintNPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintNPPActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintNPP);
        btnPrintNPP.setBounds(260, 170, 260, 25);

        btnPublishSt.setText("Publish standings after round 1");
        btnPublishSt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublishStActionPerformed(evt);
            }
        });
        pnlPub.add(btnPublishSt);
        btnPublishSt.setBounds(260, 220, 260, 40);

        btnExportRLEGF.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLEGF.setText("Export results for EGF rating list");
        btnExportRLEGF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLEGFActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLEGF);
        btnExportRLEGF.setBounds(540, 80, 230, 50);

        btnExportRLFFG.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLFFG.setText("Export results for FFG rating list");
        btnExportRLFFG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLFFGActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLFFG);
        btnExportRLFFG.setBounds(540, 180, 230, 50);

        btnExportRLAGA.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLAGA.setText("Export results for AGA rating list");
        btnExportRLAGA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLAGAActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLAGA);
        btnExportRLAGA.setBounds(540, 280, 230, 50);

        btnExportPlayersCSV.setForeground(new java.awt.Color(0, 128, 0));
        btnExportPlayersCSV.setText("Export players in csv format");
        btnExportPlayersCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPlayersCSVActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportPlayersCSV);
        btnExportPlayersCSV.setBounds(540, 380, 230, 50);

        pnlTeams.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams"));
        pnlTeams.setLayout(null);

        btnPublishTL.setText("Publish teams list");
        btnPublishTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublishTLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPublishTL);
        btnPublishTL.setBounds(10, 30, 230, 50);

        btnPublishML.setText("Publish matches list after round 1");
        btnPublishML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublishMLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPublishML);
        btnPublishML.setBounds(260, 30, 260, 50);

        btnPublishTS.setText("Publish team standings after round 1");
        btnPublishTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublishTSActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPublishTS);
        btnPublishTS.setBounds(260, 120, 260, 50);

        pnlPub.add(pnlTeams);
        pnlTeams.setBounds(0, 260, 530, 180);

        btnPrintRS.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintRS.setForeground(new java.awt.Color(0, 0, 255));
        btnPrintRS.setText("Print result sheets of Round 1");
        btnPrintRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintRSActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintRS);
        btnPrintRS.setBounds(260, 130, 260, 25);

        tpnPublish.addTab("Publish", pnlPub);

        getContentPane().add(tpnPublish);
        tpnPublish.setBounds(0, 0, 790, 490);

        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelp.setText("help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        getContentPane().add(btnHelp);
        btnHelp.setBounds(10, 490, 380, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void customInitComponents() throws RemoteException {
        int w = JFrGotha.MEDIUM_FRAME_WIDTH;
        int h = JFrGotha.MEDIUM_FRAME_HEIGHT;

        this.tpnPublish.setBounds(0, 0, w - 6, h - 74);
        
        this.tpnPublish.setSelectedComponent(pnlPub);

//        this.rdbSortByRank.setVisible(false);
        updateAllViews();
    }

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        cleanClose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void cleanClose(){
        running = false;
        dispose();
    }

    private void btnExportRLFFGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLFFGActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        TournamentParameterSet tps = null;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        if (gps.getStrSize().length() == 0 || gps.getBasicTime() == 0) {
            JOptionPane.showMessageDialog(this, "Goban size and Thinking time should be documented."
                + "\nSee Options .. Games menu item", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "tou");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generateTouFile(tournament, f);
    }//GEN-LAST:event_btnExportRLFFGActionPerformed

    private void btnPrintTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTPActionPerformed
        TournamentPrinting.printTournamentParameters(tournament);
    }//GEN-LAST:event_btnPrintTPActionPerformed

    private void btnExportRLAGAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLAGAActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // If some players have no aga id, should OpenGotha generate dummy Ids ?
        ArrayList<Player> alP = null;
        try {
            alP = tournament.playersList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }
        int nbPWithoutId = 0;
        for (Player p : alP) {
            if (p.getAgaId().equals("")) {
                nbPWithoutId++;
            }
        }
        if (nbPWithoutId > 0) {
            String strPrompt = "" + nbPWithoutId + " players have no AGA Id."
            + "\nOpenGotha will generate dummy AGA Ids in the \"99xxx\" range."
            + "\nYou must have valid AGA memberships before it will be rated.";
            int response = JOptionPane.showConfirmDialog(this, strPrompt, "Message", JOptionPane.OK_CANCEL_OPTION);

            if (response == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "txt");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generateAGAResultsFile(tournament, f);
    }//GEN-LAST:event_btnExportRLAGAActionPerformed

    private void btnExportRLEGFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLEGFActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "h9");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        int response = JOptionPane.showConfirmDialog(this, "Do you want to keep by default results in the exportFile ?"
            + "\nClick Yes to keep them or No to drop them", "Message", JOptionPane.YES_NO_CANCEL_OPTION);

        if (response == JOptionPane.YES_OPTION) {
            ExternalDocument.generateH9File(tournament, f, true);
        } else if (response == JOptionPane.NO_OPTION) {
            ExternalDocument.generateH9File(tournament, f, false);
        } else {
            return;
        }
    }//GEN-LAST:event_btnExportRLEGFActionPerformed

    private void spnRoundNumberStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnRoundNumberStateChanged
        int demandedRN = (Integer) (spnRoundNumber.getValue()) - 1;
        this.demandedDisplayedRoundNumberHasChanged(demandedRN);
    }//GEN-LAST:event_spnRoundNumberStateChanged

    private void btnExportPlayersCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPlayersCSVActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "csv");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generatePlayersCSVFile(tournament, f);
    }//GEN-LAST:event_btnExportPlayersCSVActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        Gotha.displayGothaHelp("Publish menu");
    }//GEN-LAST:event_btnHelpActionPerformed

    private void allSortRDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allSortRDBActionPerformed
        TournamentParameterSet tps;
        DPParameterSet dpps;
        try {
            tps = tournament.getTournamentParameterSet();
            dpps = tps.getDPParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean somethingHasChanged = false;
        int newPlayerSortType = PlayerComparator.NAME_ORDER;
        if (this.rdbSortByRank.isSelected()) {
            newPlayerSortType = PlayerComparator.RANK_ORDER;
        }
        if (newPlayerSortType != dpps.getPlayerSortType()) {
            dpps.setPlayerSortType(newPlayerSortType);
            somethingHasChanged = true;
        }

        if (somethingHasChanged) {
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_allSortRDBActionPerformed

    private void allGameFormatRDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allGameFormatRDBActionPerformed
        TournamentParameterSet tps;
        DPParameterSet dpps;
        try {
            tps = tournament.getTournamentParameterSet();
            dpps = tps.getDPParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean somethingHasChanged = false;
        int newGameFormat = DPParameterSet.DP_GAME_FORMAT_FULL;
        if (this.rdbGameFormatShort.isSelected()) {
            newGameFormat = DPParameterSet.DP_GAME_FORMAT_SHORT;
        }
        if (newGameFormat != dpps.getGameFormat()) {
            dpps.setGameFormat(newGameFormat);
            somethingHasChanged = true;
        }

        if (somethingHasChanged) {
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_allGameFormatRDBActionPerformed

    private void allContentsCKBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allContentsCKBActionPerformed
        TournamentParameterSet tps;
        DPParameterSet dpps;
        try {
            tps = tournament.getTournamentParameterSet();
            dpps = tps.getDPParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        boolean oldValue;
        boolean newValue;

        boolean somethingHasChanged = false;

        oldValue = dpps.isShowPlayerRank();
        newValue = this.ckbShowPlayerRank.isSelected();
        if (newValue != oldValue) {
            dpps.setShowPlayerRank(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowPlayerCountry();
        newValue = this.ckbShowPlayerCountry.isSelected();
        if (newValue != oldValue) {
            dpps.setShowPlayerCountry(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowPlayerClub();
        newValue = this.ckbShowPlayerClub.isSelected();
        if (newValue != oldValue) {
            dpps.setShowPlayerClub(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowByePlayer();
        newValue = this.ckbShowByePlayer.isSelected();
        if (newValue != oldValue) {
            dpps.setShowByePlayer(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowNotPairedPlayers();
        newValue = this.ckbShowNotPairedPlayers.isSelected();
        if (newValue != oldValue) {
            dpps.setShowNotPairedPlayers(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowNotParticipatingPlayers();
        newValue = this.ckbShowNotParticipatingPlayers.isSelected();
        if (newValue != oldValue) {
            dpps.setShowNotParticipatingPlayers(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowNotFinallyRegisteredPlayers();
        newValue = this.ckbShowNotFinallyRegisteredPlayers.isSelected();
        if (newValue != oldValue) {
            dpps.setShowNotFinallyRegisteredPlayers(newValue);
            somethingHasChanged = true;
        }
    
        oldValue = dpps.isDisplayNPPlayers();
        newValue = this.ckbDisplayNPPlayers.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayNPPlayers(newValue);
            somethingHasChanged = true;
        }    
        
        oldValue = dpps.isDisplayNumCol();
        newValue = this.ckbDisplayNumCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayNumCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayPlCol();
        newValue = this.ckbDisplayPlCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayPlCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayCoCol();
        newValue = this.ckbDisplayCoCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayCoCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayClCol();
        newValue = this.ckbDisplayClCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayClCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayIndGamesInMatches();
        newValue = this.ckbDisplayIndGames.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayIndGamesInMatches(newValue);
            somethingHasChanged = true;
        }

        if (somethingHasChanged) {
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_allContentsCKBActionPerformed

    private void allParametersCKBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allParametersCKBActionPerformed
        TournamentParameterSet tps;
        PublishParameterSet pubPS;
        try {
            tps = tournament.getTournamentParameterSet();
            pubPS = tps.getPublishParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        boolean oldValue;
        boolean newValue;

        boolean somethingHasChanged = false;

        oldValue = pubPS.isPrint();
        newValue = this.ckbPrint.isSelected();
        if (newValue != oldValue) {
            pubPS.setPrint(newValue);
            somethingHasChanged = true;
        }
        oldValue = pubPS.isExportToLocalFile();
        newValue = this.ckbExportToLocalFile.isSelected();
        if (newValue != oldValue) {
            pubPS.setExportToLocalFile(newValue);
            somethingHasChanged = true;
        }
        oldValue = pubPS.isHtmlAutoScroll();
        newValue = this.ckbHTMLAutoscroll.isSelected();
        if (newValue != oldValue) {
            pubPS.setHtmlAutoScroll(newValue);
            somethingHasChanged = true;
        }

        if (somethingHasChanged) {
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_allParametersCKBActionPerformed
    
    private void btnPublishPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublishPLActionPerformed
        TournamentPublishing.publish(tournament, processedRoundNumber, 
                TournamentPublishing.TYPE_PLAYERSLIST, TournamentPublishing.SUBTYPE_DEFAULT);        
    }//GEN-LAST:event_btnPublishPLActionPerformed

    private void btnPublishGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublishGLActionPerformed
        TournamentPublishing.publish(tournament, processedRoundNumber, 
                TournamentPublishing.TYPE_GAMESLIST, TournamentPublishing.SUBTYPE_DEFAULT);        
    }//GEN-LAST:event_btnPublishGLActionPerformed

    private void btnPublishStActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublishStActionPerformed
        TournamentPublishing.publish(tournament, processedRoundNumber, 
                TournamentPublishing.TYPE_STANDINGS, TournamentPublishing.SUBTYPE_DEFAULT);
    }//GEN-LAST:event_btnPublishStActionPerformed

    private void btnPrintNPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintNPPActionPerformed
        TournamentPrinting.printNotPlayingPlayersList(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintNPPActionPerformed

    private void btnPublishMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublishMLActionPerformed
        TournamentPublishing.publish(tournament, processedRoundNumber, 
                TournamentPublishing.TYPE_MATCHESLIST, TournamentPublishing.SUBTYPE_DEFAULT);
    }//GEN-LAST:event_btnPublishMLActionPerformed

    private void btnPublishTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublishTLActionPerformed
        TournamentPublishing.publish(tournament, processedRoundNumber, 
                TournamentPublishing.TYPE_TEAMSLIST, TournamentPublishing.SUBTYPE_DEFAULT);
    }//GEN-LAST:event_btnPublishTLActionPerformed

    private void btnPublishTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublishTSActionPerformed
       TournamentPublishing.publish(tournament, processedRoundNumber, 
                TournamentPublishing.TYPE_TEAMSSTANDINGS, TournamentPublishing.SUBTYPE_DEFAULT);
    }//GEN-LAST:event_btnPublishTSActionPerformed

    private void btnPrintRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintRSActionPerformed
        TournamentPrinting.printResultSheets(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintRSActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cleanClose();
    }//GEN-LAST:event_formWindowClosing

    private void demandedDisplayedRoundNumberHasChanged(int demandedRN) {
        int numberOfRounds = 0;
        try {
            numberOfRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (demandedRN < 0 || demandedRN >= numberOfRounds) {
            spnRoundNumber.setValue(processedRoundNumber + 1);
            return;
        }
        if (demandedRN == processedRoundNumber) {
            return;
        }

        processedRoundNumber = demandedRN;
        updateAllViews();
    }

    private void tournamentChanged() {
        try {
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateAllViews();
    }

    private void updateAllViews() {
        try {
            if (!tournament.isOpen()) {
                cleanClose();
            }
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle("Publish. " + tournament.getFullName());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGamesPair.class.getName()).log(Level.SEVERE, null, ex);
        }

        int nbRounds = Gotha.MAX_NUMBER_OF_ROUNDS;
        try {
            nbRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGamesPair.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (this.processedRoundNumber >= nbRounds) {
            JOptionPane.showMessageDialog(this, "The number of rounds has been modified."
                    + "\n" + "Current round will be consequently changed",
                    "Games Pair Message", JOptionPane.WARNING_MESSAGE);
            this.processedRoundNumber = nbRounds - 1;
        }


        updateComponents();

        try {
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPublish.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void updateComponents() {
        try {
            this.updatePnlContents();
            updatePnlPar();
            updatePnlPub();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPublish.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updatePnlPub() throws RemoteException {
        this.spnRoundNumber.setValue(this.processedRoundNumber + 1);

        String strRound = " round " + (processedRoundNumber + 1);
        this.btnPublishGL.setText("Publish games of" + strRound);
        this.btnPrintRS.setText("Print result sheets of" + strRound);
        this.btnPrintNPP.setText("Print non-playing players of" + strRound);
        this.btnPublishSt.setText("Publish standings after" + strRound);
        this.btnPublishML.setText("Publish matches list of" + strRound);
        this.btnPublishTS.setText("Publish team standings after" + strRound);

        int nbTeams = tournament.teamsList().size();
        boolean bT = false;
        if (nbTeams > 0) {
            bT = true;
        }
        Component[] tabComp = this.pnlTeams.getComponents();
        for (Component comp : tabComp) {
            comp.setEnabled(bT);
        }
    }

    private void updatePnlContents() throws RemoteException {
        DPParameterSet dpps = tournament.getTournamentParameterSet().getDPParameterSet();
        if (dpps.getPlayerSortType() == PlayerComparator.NAME_ORDER) {
            this.rdbSortByName.setSelected(true);
        } else {
            this.rdbSortByRank.setSelected(true);
        }
        if (dpps.getGameFormat() == DPParameterSet.DP_GAME_FORMAT_FULL) {
            this.rdbGameFormatFull.setSelected(true);
        } else {
            this.rdbGameFormatShort.setSelected(true);
        }

        this.ckbShowPlayerRank.setSelected(dpps.isShowPlayerRank());
        this.ckbShowPlayerCountry.setSelected(dpps.isShowPlayerCountry());
        this.ckbShowPlayerClub.setSelected(dpps.isShowPlayerClub());

        this.ckbDisplayNPPlayers.setSelected(dpps.isDisplayNPPlayers());
        
        this.ckbDisplayNumCol.setSelected(dpps.isDisplayNumCol());
        this.ckbDisplayPlCol.setSelected(dpps.isDisplayPlCol());
        this.ckbDisplayCoCol.setSelected(dpps.isDisplayCoCol());
        this.ckbDisplayClCol.setSelected(dpps.isDisplayClCol());
        this.ckbShowByePlayer.setSelected(dpps.isShowByePlayer());
        this.ckbShowNotPairedPlayers.setSelected(dpps.isShowNotPairedPlayers());
        this.ckbShowNotParticipatingPlayers.setSelected(dpps.isShowNotParticipatingPlayers());
        this.ckbShowNotFinallyRegisteredPlayers.setSelected(dpps.isShowNotFinallyRegisteredPlayers());
        this.ckbDisplayIndGames.setSelected(dpps.isDisplayIndGamesInMatches());
    }

    private void updatePnlPar() throws RemoteException {
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        PublishParameterSet pubPS = tps.getPublishParameterSet();

        this.ckbPrint.setSelected(pubPS.isPrint());
        this.ckbExportToLocalFile.setSelected(pubPS.isExportToLocalFile());

        this.ckbHTMLAutoscroll.setSelected(pubPS.isHtmlAutoScroll());
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnExportPlayersCSV;
    private javax.swing.JButton btnExportRLAGA;
    private javax.swing.JButton btnExportRLEGF;
    private javax.swing.JButton btnExportRLFFG;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnPrintNPP;
    private javax.swing.JButton btnPrintRS;
    private javax.swing.JButton btnPrintTP;
    private javax.swing.JButton btnPublishGL;
    private javax.swing.JButton btnPublishML;
    private javax.swing.JButton btnPublishPL;
    private javax.swing.JButton btnPublishSt;
    private javax.swing.JButton btnPublishTL;
    private javax.swing.JButton btnPublishTS;
    private javax.swing.JCheckBox ckbDisplayClCol;
    private javax.swing.JCheckBox ckbDisplayCoCol;
    private javax.swing.JCheckBox ckbDisplayIndGames;
    private javax.swing.JCheckBox ckbDisplayNPPlayers;
    private javax.swing.JCheckBox ckbDisplayNumCol;
    private javax.swing.JCheckBox ckbDisplayPlCol;
    private javax.swing.JCheckBox ckbExportToLocalFile;
    private javax.swing.JCheckBox ckbHTMLAutoscroll;
    private javax.swing.JCheckBox ckbPrint;
    private javax.swing.JCheckBox ckbShowByePlayer;
    private javax.swing.JCheckBox ckbShowNotFinallyRegisteredPlayers;
    private javax.swing.JCheckBox ckbShowNotPairedPlayers;
    private javax.swing.JCheckBox ckbShowNotParticipatingPlayers;
    private javax.swing.JCheckBox ckbShowPlayerClub;
    private javax.swing.JCheckBox ckbShowPlayerCountry;
    private javax.swing.JCheckBox ckbShowPlayerRank;
    private javax.swing.ButtonGroup grpGameFormat;
    private javax.swing.ButtonGroup grpRemote;
    private javax.swing.ButtonGroup grpSortType;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlActions;
    private javax.swing.JPanel pnlContents;
    private javax.swing.JPanel pnlGL;
    private javax.swing.JPanel pnlML;
    private javax.swing.JPanel pnlNPP;
    private javax.swing.JPanel pnlPL;
    private javax.swing.JPanel pnlPar;
    private javax.swing.JPanel pnlPub;
    private javax.swing.JPanel pnlSt;
    private javax.swing.JPanel pnlTeams;
    private javax.swing.JRadioButton rdbGameFormatFull;
    private javax.swing.JRadioButton rdbGameFormatShort;
    private javax.swing.JRadioButton rdbSortByName;
    private javax.swing.JRadioButton rdbSortByRank;
    private javax.swing.JSpinner spnRoundNumber;
    private javax.swing.JTabbedPane tpnPublish;
    // End of variables declaration//GEN-END:variables
}
